import numpy as np
import matplotlib.pyplot as plt
import matplotlib

if __name__=="__main__":

    file = 'src/florisse3D/Plots/zref50/3/A2heights.txt'
    opt = open(file)
    optimized = np.loadtxt(opt)
    group20_2 = optimized[:,0]
    group20_1 = optimized[:,1]

    shearExp = np.array([0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,\
                        0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3])

    font = {'family' : 'normal',
        'weight' : 'normal',
        'size'   : 18}

    matplotlib.rc('font', **font)


    fig = plt.figure(2)
    ax = fig.add_subplot(111)
    ax.plot(shearExp, group20_1, 'b',linewidth=3,label='hub height, group 1')
    ax.plot(shearExp, group20_2, 'r',linewidth=3,label='hub height, group 2')
    ax.plot([0,1],[90.,90.],'--k')#, label='90 m')
    ax.text(0.18,82,'90 m')
    # ax.plot(shearExp, group20_1-35., 'b',label='blade tip, group 1')
    # ax.plot(shearExp, group20_2+35., 'r',label='blade tip, group 1')
    plt.xlabel('Shear Exponent')
    plt.ylabel('Optimized Hub Height (m)')
    plt.title('Small Farm: Small Rotor: Hub Heights')
    plt.legend(loc=4)
    plt.tight_layout()
    plt.axis([0.075,0.305,0.,120.])

    plt.show()




    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib

    shearExp = np.linspace(0.08,0.3,23)
    font = {'family' : 'normal',
    'weight' : 'normal',
    'size'   : 18}

    matplotlib.rc('font', **font)

    """SMALL"""
    """baseline"""
    ideal_AEPb = np.array([  4.10465416e+08,   4.17767591e+08,   4.25199673e+08,
             4.32763970e+08,   4.40462837e+08,   4.48298666e+08,
             4.56273895e+08,   4.64391003e+08,   4.72652514e+08,
             4.80948195e+08,   4.88928743e+08,   4.97051265e+08,
             5.05318286e+08,   5.13678226e+08,   5.21896202e+08,
             5.30260376e+08,   5.38570749e+08,   5.46787472e+08,
             5.55060792e+08,   5.63261342e+08,   5.71475307e+08,
             5.79223386e+08,   5.86466197e+08])
    AEPb = np.array([  2.47328309e+08,   2.51728278e+08,   2.56206521e+08,
             2.60764432e+08,   2.65403429e+08,   2.70124953e+08,
             2.74930473e+08,   2.79821484e+08,   2.84799505e+08,
             2.89842411e+08,   2.94877917e+08,   3.00003005e+08,
             3.05219268e+08,   3.10511615e+08,   3.15808394e+08,
             3.21199404e+08,   3.26643798e+08,   3.32134365e+08,
             3.37710839e+08,   3.43302754e+08,   3.48966346e+08,
             3.54602247e+08,   3.60197381e+08])
    COEb = np.array([ 85.0410799 ,  83.67377623,  82.33013751,  81.01019268,
            79.71309569,  78.4379296 ,  77.1860451 ,  75.95545808,
            74.74630745,  73.56388118,  72.42358968,  71.30264436,
            70.1973027 ,  69.11906154,  68.07330913,  67.04478708,
            66.04059963,  65.06119631,  64.09640556,  63.16527345,
            62.25029853,  61.36869011,  60.5214502 ])
    costb = np.array([  2.10330665e+10,   2.10630556e+10,   2.10935181e+10,
             2.11245769e+10,   2.11561289e+10,   2.11880421e+10,
             2.12207959e+10,   2.12539690e+10,   2.12877114e+10,
             2.13219327e+10,   2.13561173e+10,   2.13910076e+10,
             2.14255694e+10,   2.14622714e+10,   2.14981225e+10,
             2.15347456e+10,   2.15717523e+10,   2.16090591e+10,
             2.16460509e+10,   2.16848123e+10,   2.17232592e+10,
             2.17614754e+10,   2.17996679e+10])
    tower_costb = np.array([ 33623682.97330754,  33646352.1523455 ,  33668986.58628966,
            33692420.35947319,  33715837.93248764,  33738210.63789596,
            33762974.20537763,  33786984.82206847,  33811270.62580765,
            33836158.45814328,  33861108.45444167,  33887214.47070372,
            33906855.3459703 ,  33938727.26815102,  33964188.70571121,
            33991083.7832114 ,  34018397.29465535,  34045842.4089272 ,
            34067155.95865495,  34100699.76286625,  34128750.13412264,
            34156351.28385241,  34185597.63273675])
    BOSb = np.array([ 57945182.55702832,  57945400.45255464,  57945618.01411211,
            57945843.25889635,  57946068.34796509,  57946283.39379504,
            57946521.42052558,  57946752.20991383,  57946985.64439239,
            57947224.86555329,  57947464.68423253,  57947715.61454386,
            57947904.40209758,  57948210.75413829,  57948455.48877683,
            57948714.00352316,  57948976.54024504,  57949240.34192973,
            57949445.20718433,  57949767.62930921,  57950037.24870732,
            57950302.55020052,  57950583.6653028 ])
    wake_lossb = np.array([ 39.74442187,  39.74442187,  39.74442187,  39.74442187,
            39.74442187,  39.74442187,  39.74442187,  39.74442187,
            39.74442187,  39.7352119 ,  39.68897899,  39.64344805,
            39.59861015,  39.55133791,  39.488275  ,  39.42609737,
            39.34988143,  39.25713706,  39.1578645 ,  39.05089368,
            38.93588363,  38.77970824,  38.58173198])

    """1 group"""
    ideal_AEP1 = np.array([  3.80576626e+08,   3.86008242e+08,   3.92173440e+08,
             4.04116312e+08,   4.16402492e+08,   4.28884508e+08,
             4.35041409e+08,   4.41293494e+08,   4.47619159e+08,
             4.54243329e+08,   4.65862102e+08,   4.77988174e+08,
             4.90109059e+08,   5.03889445e+08,   5.15644136e+08,
             5.31555908e+08,   5.44851134e+08,   5.57670876e+08,
             5.70932761e+08,   5.81635575e+08,   5.91783957e+08,
             6.03740446e+08,   6.13692251e+08])
    AEP1 = np.array([  2.29318646e+08,   2.32591498e+08,   2.36306373e+08,
             2.43502620e+08,   2.50905729e+08,   2.58426840e+08,
             2.62136716e+08,   2.65903946e+08,   2.69715512e+08,
             2.73706944e+08,   2.80707903e+08,   2.88014537e+08,
             2.95622664e+08,   3.04317709e+08,   3.11778714e+08,
             3.22034421e+08,   3.30840468e+08,   3.39490643e+08,
             3.48583727e+08,   3.56420394e+08,   3.64333007e+08,
             3.73631577e+08,   3.81371102e+08])
    tower_cost1 = np.array([ 16146499.25736432,  16846755.85285272,  17694712.55348704,
            20180332.09994264,  22499349.8059318 ,  24617179.1323556 ,
            24632057.50928923,  24648212.98341035,  24659378.52771848,
            24733524.99454877,  26193714.31553246,  27639445.55458517,
            29131409.60355898,  30972794.38871579,  32106897.10679964,
            34367728.9668173 ,  35844180.65151103,  37123443.08465368,
            38490330.64327099,  39276288.65290488,  40072555.02028491,
            41322042.61672229,  41835351.10951237])
    wake_loss1 = np.array([ 39.74442187,  39.74442187,  39.74442187,  39.74442187,
            39.74442187,  39.74442187,  39.74442187,  39.74442187,
            39.74442187,  39.74442187,  39.74442187,  39.74442187,
            39.68226899,  39.6062546 ,  39.53606905,  39.41664165,
            39.2787411 ,  39.12347634,  38.94487211,  38.72101206,
            38.43479498,  38.11387348,  37.85629502])
    COE1 = np.array([ 79.73416979,  79.17173698,  78.57945231,  78.01028311,
            77.30363856,  76.47919063,  75.49124854,  74.51685625,
            73.55581553,  72.61191521,  71.7227976 ,  70.79862555,
            69.87662992,  68.9498832 ,  67.98618527,  67.06075598,
            66.10037574,  65.12784117,  64.16331788,  63.20786085,
            62.28459167,  61.37087483,  60.44327432])
    cost1 = np.array([  1.82845319e+10,   1.84146729e+10,   1.85688254e+10,
             1.89957083e+10,   1.93959258e+10,   1.97642755e+10,
             1.97890280e+10,   1.98143261e+10,   1.98391444e+10,
             1.98743854e+10,   2.01331561e+10,   2.03910334e+10,
             2.06571155e+10,   2.09826705e+10,   2.11966454e+10,
             2.15958717e+10,   2.18686792e+10,   2.21102927e+10,
             2.23662885e+10,   2.25285707e+10,   2.26923325e+10,
             2.29300967e+10,   2.30513181e+10])
    BOS1 = np.array([ 55380490.02080518,  55526656.73260756,  55684818.5455808 ,
            56124716.65048857,  56512933.03307344,  56849903.24044633,
            56850507.8540315 ,  56851323.5645256 ,  56851432.77803357,
            56858975.94086672,  57029653.03892609,  57192538.47803366,
            57356159.19423512,  57571844.92323574,  57710572.97413859,
            57995776.49562266,  58174258.42376015,  58319171.91949999,
            58461724.64156657,  58535350.50170568,  58605189.68468681,
            58713224.9066349 ,  58753646.1221076 ])

    """2 groups"""
    ideal_AEP2 = np.array([  3.82078602e+08,   3.85716125e+08,   3.90481718e+08,
             3.94357589e+08,   3.98327502e+08,   4.02389932e+08,
             4.06557796e+08,   4.11090155e+08,   4.16676706e+08,
             4.22413040e+08,   4.35180324e+08,   4.51752095e+08,
             4.59085652e+08,   4.66203741e+08,   4.73522860e+08,
             4.80894843e+08,   4.88102423e+08,   4.95239644e+08,
             5.02575663e+08,   5.10371401e+08,   5.18214407e+08,
             5.26854300e+08,   5.36524563e+08])
    AEP2 = np.array([  2.80035989e+08,   2.82808763e+08,   2.86541971e+08,
             2.89416950e+08,   2.92362102e+08,   2.95372911e+08,
             2.98468928e+08,   3.01685883e+08,   3.05181258e+08,
             3.08794370e+08,   3.18574170e+08,   3.31783785e+08,
             3.36937963e+08,   3.41888747e+08,   3.46965994e+08,
             3.52156349e+08,   3.57405575e+08,   3.62711772e+08,
             3.68169541e+08,   3.73824590e+08,   3.79607297e+08,
             3.85612738e+08,   3.91891075e+08])
    tower_cost2 = np.array([ 24760398.07610117,  24848375.18453292,  25264440.25212284,
            25287781.53856856,  25311569.19737323,  25333010.70382905,
            25364001.1408332 ,  25416050.03331462,  25569324.09441949,
            25716611.45983376,  28446895.78417078,  32369469.63730412,
            32706137.2577231 ,  32900243.58479853,  33103300.03290809,
            33308795.10133406,  33526021.80572877,  33736181.75958945,
            33943174.85918789,  34166897.36634266,  34378913.99353539,
            34625255.07271547,  34916334.6944499 ])
    wake_loss2 =  np.array([ 26.70723034,  26.67955906,  26.61833886,  26.61052856,
            26.60258182,  26.59535272,  26.58634752,  26.61320637,
            26.75826278,  26.89752895,  26.79490489,  26.55622658,
            26.60673199,  26.66537888,  26.72666441,  26.77061232,
            26.77652112,  26.76035202,  26.74346015,  26.75440103,
            26.74705846,  26.80846723,  26.95747735])
    COE2 = np.array([ 70.77857607,  70.18949175,  69.57541948,  68.95639699,
            68.33483402,  67.71083165,  67.08652737,  66.46305892,
            65.8545207 ,  65.23359818,  64.67099754,  64.06256752,
            63.32716413,  62.58674053,  61.85116324,  61.12004057,
            60.40639161,  59.70147554,  58.99359549,  58.28586611,
            57.57663471,  56.87369582,  56.17583829])
    cost2 = np.array([  1.98205486e+10,   1.98502034e+10,   1.99362778e+10,
             1.99571501e+10,   1.99785157e+10,   1.99999454e+10,
             2.00232439e+10,   2.00509666e+10,   2.00975655e+10,
             2.01437679e+10,   2.06025094e+10,   2.12549211e+10,
             2.13373257e+10,   2.13977023e+10,   2.14602504e+10,
             2.15238103e+10,   2.15895811e+10,   2.16544280e+10,
             2.17196450e+10,   2.17886900e+10,   2.18565107e+10,
             2.19312215e+10,   2.20148097e+10])
    BOS2 = np.array([ 55916210.73263796,  55923546.50612815,  55989033.92966186,
            55990325.75217941,  55991655.1044876 ,  55992808.19631377,
            55994446.31767966,  56004137.69180351,  56047243.56124087,
            56087392.71565929,  56358650.31982595,  56733463.64402974,
            56783715.96085835,  56820273.22540073,  56858610.53126651,
            56896841.84864636,  56937578.66597614,  56975267.50238791,
            57011727.81416339,  57051594.59066267,  57087418.96363312,
            57131686.10193297,  57186986.63956779])

    plt.figure(1)
    plt.plot(shearExp,wake_lossb,'ob',label='baseline')
    plt.plot(shearExp,wake_loss1,'or', label='1 group')
    plt.plot(shearExp,wake_loss2,'ok', label='2 groups')
    plt.title('Small Farm: Small Rotor')
    plt.xlabel('Wind Shear Exponent')
    plt.ylabel('Wake Loss')
    plt.ylim(0.,50.)
    plt.xlim(0.075,0.305)
    plt.legend(loc=4)
    plt.savefig('small3_wl.pdf', transparent=True)
    #
    plt.figure(2)
    plt.plot(shearExp,AEPb,'ob',label='baseline')
    plt.plot(shearExp,AEP1,'or',label='1 group')
    plt.plot(shearExp,AEP2,'ok',label='2 groups')
    plt.plot(shearExp,ideal_AEPb,'o',markerfacecolor='none',markeredgecolor='red')
    plt.plot(shearExp,ideal_AEP1,'o',markerfacecolor='none',markeredgecolor='blue')
    plt.plot(shearExp,ideal_AEP2,'o',markerfacecolor='none',markeredgecolor='black')
    plt.title('Small Farm: Small Rotor')
    plt.xlabel('Wind Shear Exponent')
    plt.xlim(0.075,0.305)
    plt.ylabel('AEP')
    plt.legend(loc=2)
    plt.savefig('small3_AEP.pdf', transparent=True)
    #
    plt.figure(3)
    plt.plot(shearExp,tower_costb,'ob',label='baseline')
    plt.plot(shearExp,tower_cost1,'or', label='1 group')
    plt.plot(shearExp,tower_cost2,'ok', label='2 groups')
    plt.title('Small Farm: Small Rotor')
    plt.xlabel('Wind Shear Exponent')
    plt.ylabel('Tower Cost')
    plt.xlim(0.075,0.305)
    plt.legend(loc=4)
    plt.savefig('small3_tc.pdf', transparent=True)

    plt.figure(4)
    plt.plot(tower_costb,wake_lossb,'ob',label='baseline')
    plt.plot(tower_cost1,wake_loss1,'or', label='1 group')
    plt.plot(tower_cost2,wake_loss2,'ok', label='2 groups')
    plt.title('Wake Loss vs Tower Cost')
    plt.xlabel('Tower Cost')
    plt.ylabel('Wake Loss')
    plt.legend(loc=5)
    plt.savefig('small3_wltc.pdf', transparent=True)

    # plt.figure(4)
    # plt.plot(shearExp,COEb,'ob')
    # plt.plot(shearExp,COE1,'or')
    # plt.plot(shearExp,COE2,'ok')
    # plt.title('COE')

    # plt.figure(5)
    # plt.plot(shearExp,costb,'ob')
    # plt.plot(shearExp,cost1,'or')
    # plt.plot(shearExp,cost2,'ok')
    # plt.title('cost')

    # plt.figure(8)
    # plt.plot(shearExp,costb/AEPb,'ob')
    # plt.plot(shearExp,cost1/AEP1,'or')
    # plt.plot(shearExp,cost2/AEP2,'ok')
    # plt.title('second COE')

    # plt.figure(5)
    # plt.plot(shearExp,costb/1000.,'ob')
    # plt.plot(shearExp,cost1/1000.,'or')
    # plt.plot(shearExp,cost2/1000.,'ok')
    # plt.title('cost')

    # plt.figure(6)
    # plt.plot(shearExp,BOSb,'ob')
    # plt.plot(shearExp,BOS1,'or')
    # plt.plot(shearExp,BOS2,'ok')
    # plt.title('BOS')

    plt.show()
